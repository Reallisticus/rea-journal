import Head from "next/head";
import { parseCookies } from "nookies"; // or any other cookie parsing library
import jwt, { JwtPayload } from "jsonwebtoken";
import { env } from "~/env";
import Registration from "../components/auth/registration.component";
import { GetServerSideProps } from "next";
import { UserStatus } from "../types/global";
import Verification from "../components/auth/verification.component";
import { useEffect, useState } from "react";
import { api } from "../utils/api";

interface HomeProps {
  userStatus: UserStatus;
}

export default function Home({ userStatus: initialUserStatus }: HomeProps) {
  const [userStatus, setUserStatus] = useState<UserStatus>(initialUserStatus);
  const { data, refetch } = api.user.getUserStatus.useQuery();

  useEffect(() => {
    if (data) {
      setUserStatus(data.status);
    }
  }, [data]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        {userStatus === "FULLY_AUTHENTICATED" && <div>Hi</div>}
        {userStatus === "VERIFIED" && (
          <Verification refetchUserStatus={refetch} />
        )}
        {userStatus === "UNVERIFIED" && <Registration />}
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { req } = context;
  const cookies = parseCookies({ req });
  const token = cookies.token;

  let userStatus: UserStatus = "UNVERIFIED";

  if (token) {
    try {
      const decoded = jwt.verify(token, env.JWT_SECRET) as JwtPayload;
      if (decoded.fullyAuthenticated) {
        userStatus = "FULLY_AUTHENTICATED";
      } else if (decoded.emailVerified) {
        userStatus = "VERIFIED";
      }
    } catch (err) {
      console.error("JWT verification error:", err);
    }
  }

  return { props: { userStatus } };
};
